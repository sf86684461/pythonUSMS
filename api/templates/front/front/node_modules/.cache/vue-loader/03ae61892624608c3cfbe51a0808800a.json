{"remainingRequest":"/Users/shaofeng/Desktop/pythonUSMS/api/templates/front/front/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/shaofeng/Desktop/pythonUSMS/api/templates/front/front/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/shaofeng/Desktop/pythonUSMS/api/templates/front/front/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/shaofeng/Desktop/pythonUSMS/api/templates/front/front/src/pages/chaoshishangpin/add.vue?vue&type=template&id=a6919e62&scoped=true","dependencies":[{"path":"/Users/shaofeng/Desktop/pythonUSMS/api/templates/front/front/src/pages/chaoshishangpin/add.vue","mtime":1757151570005},{"path":"/Users/shaofeng/Desktop/pythonUSMS/api/templates/front/front/node_modules/cache-loader/dist/cjs.js","mtime":1757151725167},{"path":"/Users/shaofeng/Desktop/pythonUSMS/api/templates/front/front/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1757151725512},{"path":"/Users/shaofeng/Desktop/pythonUSMS/api/templates/front/front/node_modules/cache-loader/dist/cjs.js","mtime":1757151725167},{"path":"/Users/shaofeng/Desktop/pythonUSMS/api/templates/front/front/node_modules/vue-loader/lib/index.js","mtime":1757151725403}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}